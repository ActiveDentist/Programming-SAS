<?xml version="1.0" encoding="UTF-8" standalone="no"?><Product><Name>SAS Clinical Standards Toolkit</Name><Version>1.7</Version><Description><Line>SAS Clinical Standards Toolkit - Dataset-XML Macro API.</Line><Line/></Description><Modules><Module><Name>Dataset-XML V1.0.0 (Runtime)</Name><FileName>datasetxmlv100runtime</FileName><Since>V1.7</Since><Description><Line>This is the CDISC-Dataset-XML 1.0.0 runtime macro library.</Line><Line/></Description><SASFiles><SASFile><FileName>cstutil_resultsdsattr.sas</FileName><Macros><Macro><Signature>%cstutil_resultsdsattr;</Signature><Exposure>internal</Exposure><Since>1.2</Since><Description><Line> cstutil_resultsdsattr</Line><Line/><Line> Defines the column attributes of the Results data set.</Line><Line/><Line> Use this macro in a statement level in a SAS DATA step, where a SAS ATTRIB</Line><Line> statement can be used.</Line><Line/></Description><CodeParams/></Macro></Macros></SASFile><SASFile><FileName>cstutil_setcstgroot.sas</FileName><Macros><Macro><Signature>%cstutil_setcstgroot;</Signature><Exposure>internal</Exposure><Since>1.2</Since><History><Change Date="2014-04-07"><Line>  Removed SAS 9.3 option.</Line></Change><Change Date="2014-06-18"><Line>  Made sure that this only runs with SAS 9.4 and newer.</Line></Change></History><Description><Line> cstutil_setcstgroot</Line><Line/><Line> Sets the global macro variable _cstGRoot.</Line><Line/><Line> This macro sets the _cstGRoot global macro variable to the location of the</Line><Line> SAS Clinical Standards Toolkit sample library as specified by the CSTGLOBALLIB</Line><Line> system option.</Line><Line/></Description><CodeParams/></Macro></Macros></SASFile><SASFile><FileName>cstutil_writeresult.sas</FileName><Macros><Macro><Signature>%cstutil_writeresult(_cstResultID=, _cstValCheckID=, _cstResultParm1=, _cstResultParm2=, _cstResultSeqParm=1, _cstSeqNoParm=1, _cstSrcDataParm=, _cstResultFlagParm=0, _cstRCParm=0, _cstActualParm=, _cstKeyValuesParm=, _cstResultDetails=, _cstResultsDSParm=&amp;_cstResultsDS);</Signature><Exposure>internal</Exposure><Since>1.2</Since><Description><Line> cstutil_writeresult</Line><Line/><Line> Adds a single record to the Results data set based on parameter values.</Line><Line/><Line> This macro must be called outside the context of a DATA step. Instead, it can</Line><Line> be called after a DATA step boundary.</Line><Line/></Description><MacroVars><Param Name="_cstDebug"><Line> Turns debugging on or off for the session</Line></Param><Param Name="_cstMessages"><Line> Cross-standard work messages data set</Line></Param><Param Name="_cst_rc"><Line> Task error status</Line></Param></MacroVars><CommentParams><Param Name="_cstActualParm"><Line> - optional - The source data value or values that caused</Line><Line>            the result to be written to the Results data set.</Line></Param><Param Name="_cstKeyValuesParm"><Line> - optional - Information that links the result back</Line><Line>            to a specific source data record (for example, a data set key or</Line><Line>            XML row and column values).</Line></Param><Param Name="_cstRCParm"><Line> - required - The value of _cst_rc at the point that the</Line><Line>            result is written to the Results data set.</Line><Line>            Default:  0</Line></Param><Param Name="_cstResultDetails"><Line> - optional - Run-time details about the result. These</Line><Line>            take precedence over metadata result details.</Line></Param><Param Name="_cstResultFlagParm"><Line> - optional -  A problem was detected. If this is an</Line><Line>            informational record rather than error record, this value is set to</Line><Line>            0. A positive value indicates that an error was detected. A negative</Line><Line>            value indicates that the check failed to run.</Line><Line>            Default:  0 (No)</Line></Param><Param Name="_cstResultID"><Line> - required - The result ID of the matching record in the</Line><Line>            Messages data set.</Line></Param><Param Name="_cstResultParm1"><Line> - optional - The parameter to appear in the first</Line><Line>           substitution field of the associated message with the same result ID.</Line></Param><Param Name="_cstResultParm2"><Line> - optional - The parameter to appear in the second</Line><Line>            substitution field of the associated message with the same result</Line><Line>            ID.</Line></Param><Param Name="_cstResultSeqParm"><Line> - optional - Typically, this value is 1, unless</Line><Line>            duplicate values of the results ID need to be distinguished. This</Line><Line>            distinction is needed in certain instances, such as when the same</Line><Line>            validation check ID is invoked multiple times.</Line><Line>            Default:  1</Line></Param><Param Name="_cstResultsDSParm"><Line> - optional - The base (cross-check) Results data set</Line><Line>            to which this record is appended.</Line><Line>            Default:  &amp;_cstResultsDS</Line></Param><Param Name="_cstSeqNoParm"><Line> - optional - The sequence number within _cstResultSeqParm,</Line><Line>            beginning with 1 and incremented by 1 for each observation to write</Line><Line>            to the Results data set.</Line><Line>            Default:  1</Line></Param><Param Name="_cstSrcDataParm"><Line> - optional - The information that links the metric back</Line><Line>            to the source. Example sources are the SDTM domain name or the</Line><Line>            calling validation code module.</Line></Param><Param Name="_cstValCheckID"><Line> - optional - (for validation processes) The validation</Line><Line>            check identifier from the validation_control data set.</Line></Param></CommentParams><CodeParams><Param Name="_cstResultID"/><Param Name="_cstValCheckID"/><Param Name="_cstResultParm1"/><Param Name="_cstResultParm2"/><Param Name="_cstResultSeqParm"/><Param Name="_cstSeqNoParm"/><Param Name="_cstSrcDataParm"/><Param Name="_cstResultFlagParm"/><Param Name="_cstRCParm"/><Param Name="_cstActualParm"/><Param Name="_cstKeyValuesParm"/><Param Name="_cstResultDetails"/><Param Name="_cstResultsDSParm"/></CodeParams></Macro></Macros></SASFile><SASFile><FileName>cstutilcomparedatasets.sas</FileName><Macros><Macro><Signature>%cstutilcomparedatasets(_cstLibBase=, _cstLibComp=, _cstCompareLevel=16, _cstCompOptions=, _cstCompDetail=Y);</Signature><Exposure>external</Exposure><Since>1.7</Since><Description><Line> cstutilcomparedatasets</Line><Line/><Line> Compares two libraries with SAS data sets.</Line><Line/></Description><MacroVars><Param Name="_cstDebug"><Line> Turns debugging on or off for the session. Set _cstDebug=1</Line><Line>             before this macro call to retain work files created in this macro.</Line></Param><Param Name="_cstResultSeq"><Line> Results: Unique invocation of macro</Line></Param><Param Name="_cstSeqCnt"><Line> Results: Sequence number within _cstResultSeq</Line></Param><Param Name="_cst_rc"><Line> Task error status</Line></Param><Param Name="_cst_rcmsg"><Line> Message associated with _cst_rc</Line></Param></MacroVars><CommentParams><Param Name="_cstCompDetail"><Line> - optional - Perform a detailed PROC COMPARE for a SAS</Line><Line>            data set that did not compare equal ().</Line><Line>            Values: Y | N</Line><Line>            Default:  Y</Line></Param><Param Name="_cstCompOptions"><Line> - optional - Extra options to be added to PROC COMPARE.</Line><Line>            Here is an example:</Line><Line>               _cstCompOptions=%str(criterion=0.00000000000001)</Line><Line>                   to perform a less than exact compare</Line></Param><Param Name="_cstCompareLevel"><Line> - required - The minimum PROC COMPARE return code</Line><Line>            which is considered to be an error condition.</Line><Line>            Values greater than 0, but below the _cstCompareLevel value, are</Line><Line>            considered warning conditions.</Line><Line>            Default: 16</Line></Param><Param Name="_cstLibBase"><Line> - required - The reference library of SAS data sets.</Line></Param><Param Name="_cstLibComp"><Line> - required - The library of SAS data sets that is compared</Line><Line>            against the reference library.</Line></Param></CommentParams><CodeParams><Param Name="_cstLibBase"/><Param Name="_cstLibComp"/><Param Name="_cstCompareLevel"/><Param Name="_cstCompOptions"/><Param Name="_cstCompDetail"/></CodeParams></Macro></Macros></SASFile><SASFile><FileName>cstutilgetattribute.sas</FileName><Macros><Macro><Signature>%cstutilgetattribute(_cstDataSetName=_last_, _cstVarName=, _cstAttribute=);</Signature><Exposure>internal</Exposure><Since>1.6</Since><Description><Line> cstutilgetattribute</Line><Line/><Line> Gets attribute information from a data set or variable.</Line><Line/><Line> If the data set does not exist or cannot be opened, an error occurs.</Line><Line/><Line> For data set attributes, this macro uses the attrc and attrn functions. For</Line><Line> data set variable attributes, this macro uses the VAR* functions (VARFMT,</Line><Line> VARINFMT, VARLABEL, VARLEN, VARNAME, VARNUM, and VARTYPE).</Line><Line/><Line> Examples:</Line><Line>  %put %cstutilgetattribute(_cstDataSetName=sashelp.class, _cstVarName=name,</Line><Line>                  _cstAttribute=VARTYPE)</Line><Line>  %put %cstutilgetattribute(_cstDataSetName=sashelp.class, _cstVarName=name,</Line><Line>                  _cstAttribute=VARLEN)</Line><Line>  %put %cstutilgetattribute(_cstDataSetName=sashelp.class, _cstVarName=name,</Line><Line>                  _cstAttribute=VARLABEL)</Line><Line>  %put %cstutilgetattribute(_cstDataSetName=sashelp.class, _cstVarName=name,</Line><Line>                  _cstAttribute=VARFMT)</Line><Line>  %put %cstutilgetattribute(_cstDataSetName=sashelp.class, _cstVarName=name,</Line><Line>                  _cstAttribute=VARNUM)</Line><Line>  %put %cstutilgetattribute(_cstDataSetName=sashelp.class, _cstAttribute=NOBS)</Line><Line>  %put %cstutilgetattribute(_cstDataSetName=sashelp.classE, _cstAttribute=NVARS</Line><Line/></Description><CommentParams><Param Name="_cstAttribute"><Line> - required - The attribute to get.</Line></Param><Param Name="_cstDataSetName"><Line> - required - The (libname.)memname of the data set.</Line><Line>            Default: _last_</Line></Param><Param Name="_cstVarName"><Line> - optional - The variable name in the data set.</Line></Param></CommentParams><CodeParams><Param Name="_cstDataSetName"/><Param Name="_cstVarName"/><Param Name="_cstAttribute"/></CodeParams></Macro></Macros></SASFile><SASFile><FileName>cstutilnobs.sas</FileName><Macros><Macro><Signature>%cstutilnobs(_cstDataSetName=_last_);</Signature><Exposure>internal</Exposure><Since>1.5</Since><Description><Line> cstutilnobs</Line><Line/><Line> Returns the number of observations in a data set or an error.</Line><Line/><Line> If the data set does not exist or cannot be opened, an error occurs.</Line><Line/><Line> These actions occur:</Line><Line> 1. The macro attempts to open the data set.</Line><Line>    If the data set cannot be opened, an error message is returned and</Line><Line>    processing stops.</Line><Line> 2. The macro checks the values of the data set attributes ANOBS (Does SAS know</Line><Line>    how many observations there are?) and WHSTMT (Is a WHERE statement in</Line><Line>    effect?).</Line><Line> 3. If SAS knows the number of observations and there is no WHERE clause, the</Line><Line>    value of the data set attribute NLOBS (number of logical observations) is</Line><Line>    returned.</Line><Line> 4. If SAS does not know the number of observations (perhaps this is a view or</Line><Line>    transport data set) or if a WHERE clause is in effect, a forced read is done</Line><Line>    of the data set using NLOBSF. (NOTE: that this can be slow for large data</Line><Line>    sets.)</Line><Line>    If the data set exists, the value returned is a whole number. If the data</Line><Line>    set cannot be opened, a period (the default missing value) is returned.</Line><Line/><Line>   Examples:</Line><Line>     %put %cstutilnobs(_cstDataSetName=sashelp.class)</Line><Line>     %put %cstutilnobs(_cstDataSetName=sashelp.class(where=(sex="M")))</Line><Line>     %put %cstutilnobs(_cstDataSetName=sashelp.vtable)</Line><Line>     title "sashelp.class has %cstutilnobs(_cstDataSetName=sashelp.class) obs"</Line><Line/></Description><CommentParams><Param Name="_cstDataSetName"><Line> - required - The (libname.)memname of the data set.</Line><Line>            Default: _last_</Line></Param></CommentParams><CodeParams><Param Name="_cstDataSetName"/></CodeParams></Macro></Macros></SASFile><SASFile><FileName>datasetxml_createmap.sas</FileName><Macros><Macro><Signature>%datasetxml_createmap(_cstMapFile=, _cstMapType=metamap, _cstMapVersion=1.9, _cstOutputEncoding=UTF-8, _cstValueLength=2000, _cstNameSpace=def:);</Signature><Exposure>internal</Exposure><Since>1.7</Since><Description><Line> datasetxml_createmap</Line><Line/><Line> Creates XML maps required by the Dataset-XML read and write macros.</Line><Line/></Description><MacroVars><Param Name="_cstDebug"><Line> Turns debugging on or off for the session. Set _cstDebug=1</Line><Line>             before this macro call to retain work files created by this macro.</Line></Param></MacroVars><CommentParams><Param Name="_cstMapFile"><Line> - required - The path to the XML map file to create.</Line></Param><Param Name="_cstMapType"><Line> - required - The type of XML map file to create.</Line><Line>            Values:  metamap | datamap</Line><Line>            Default: metamap</Line></Param><Param Name="_cstMapVersion"><Line> - required - The version of the XML map file to create.</Line><Line>            Default: 1.9</Line></Param><Param Name="_cstNameSpace"><Line> - optional - The extension namespace.</Line><Line>            Default: UTF-8</Line></Param><Param Name="_cstOutputEncoding"><Line> - optional - The XML encoding to use for the</Line><Line>            XML map file to create.</Line><Line>            Default: UTF-8</Line></Param><Param Name="_cstValueLength"><Line> - required - The length of the Value attribute.</Line></Param></CommentParams><CodeParams><Param Name="_cstMapFile"/><Param Name="_cstMapType"/><Param Name="_cstMapVersion"/><Param Name="_cstOutputEncoding"/><Param Name="_cstValueLength"/><Param Name="_cstNameSpace"/></CodeParams></Macro></Macros></SASFile><SASFile><FileName>datasetxml_getstatic.sas</FileName><Macros><Macro><Signature>%datasetxml_getStatic(_cstName=, _cstVar=);</Signature><Exposure>internal</Exposure><Since>1.7</Since><Description><Line> datasetxml_getstatic</Line><Line/><Line> Returns constant values that are used by other macros.</Line><Line/></Description><CommentParams><Param Name="_cstName"><Line> The name of the value to retrieve.</Line><Line>         Values: DATASET_SASREF_TYPE_REFXML | DATASET_SASREF_TYPE_EXTXML |</Line><Line>                 DATASET_SASREF_TYPE_SOURCEDATA |</Line><Line>                 DATASET_SASREF_TYPE_SOURCEMETADATA |</Line><Line>                 DATASET_SASREF_TYPE_TARGETDATA |</Line><Line>                 DATASET_SASREF_SUBTYPE_XML | DATASET_SASREF_SUBTYPE_METAMAP |</Line><Line>                 DATASET_SASREF_SUBTYPE_DATAMAP |</Line><Line>                 DATASET_JAVA_PARAMSCLASS | DATASET_JAVA_IMPORTCLASS |</Line><Line>                 DATASET_JAVA_EXPORTCLASS | DATASET_JAVA_PARSEXML</Line><Line>                 DATASET_JAVA_PICKLIST</Line></Param><Param Name="_cstVar"><Line>  The macro variable to populate with the value.</Line></Param></CommentParams><CodeParams><Param Name="_cstName"/><Param Name="_cstVar"/></CodeParams></Macro></Macros></SASFile><SASFile><FileName>datasetxml_read.sas</FileName><Macros><Macro><Signature>%datasetxml_read(_cstSourceDatasetXMLFile=, _cstSourceDatasetXMLLibrary=, _cstOutputLibrary=, _cstSourceMetadataLibrary=, _cstSourceMetadataDefineFile=, _cstSourceMetadataDefineFileRef=, _cstSourceMetadataMapFile=, _cstSourceDataMapFile=, _cstMaxLabelLength=256, _cstdatetimeLength=64, _cstAttachFormats=Y, _cstReturn=_cst_rc, _cstReturnMsg=_cst_rcmsg);</Signature><Exposure>external</Exposure><Since>1.7</Since><History><Change Date="2014-09-16"><Line> Removed the _cstNumObsWrite parameter.</Line></Change><Change Date="2014-10-13"><Line> Replace xmlv2 for Dataset-XML with javaobj.</Line></Change></History><Description><Line> datasetxml_read</Line><Line/><Line> Creates a SAS data set or a library of SAS data sets from Dataset-XML files.</Line><Line/><Line> Notes:</Line><Line>   1. Any librefs referenced in the macro parameters must be pre-allocated.</Line><Line>   2. Files that exist in the output location are overwritten.</Line><Line>   3. Either _cstSourceDatasetXMLFile or _cstSourceDatasetXMLLibrary must be</Line><Line>      specified. If neither of these parameters is specified, the macro</Line><Line>      attempts to get these parameter values from the SASReferences data set</Line><Line>      that is specified by the macro variable _cstSASRefs (type=externalxml).</Line><Line>      When multiple type=externalxml records are specified, filenames must be</Line><Line>      defined (with reftype=fileref and filetype=file). If no filenames are</Line><Line>      specified, only the first record is used, and reftype=libref,</Line><Line>      filetype=folder must be used.</Line><Line>   4. _cstOutputLibrary must be specified. If this parameter is not specified,</Line><Line>      the macro attempts to get this parameter value from the SASReferences</Line><Line>      data set that is specified by the macro variable _cstSASRefs</Line><Line>      (type=targetdata, reftype=libref, filetype=folder).</Line><Line>   5. _cstSourceMetadataLibrary, _cstSourceMetadataDefineFile, or</Line><Line>      _cstSourceMetadataDefineFileRef must be specified.</Line><Line>      If none of these parameters is specified, the macro first attempts to get</Line><Line>      _cstSourceMetadataLibrary from the SASReferences data set that is</Line><Line>      specified by the macro variable _cstSASRefs (type=sourcemetadata,</Line><Line>      subtype=, reftype=libref, filetype=folder).</Line><Line>      If that fails, the macro attempts to get _cstSourceMetadataDefineFileRef</Line><Line>      from _cstSASRefs (type=sourcemetadata, subtyp=, reftype=fileref,</Line><Line>      filetype=folder).</Line><Line>   6. If _cstSourceMetadataDefineFile or _cstSourceMetadataDefineFileRef is</Line><Line>      specified, _cstSourceMetadataMapFile must be specified. If this parameter</Line><Line>      is not specified, the macro attempts to get this parameter value from the</Line><Line>      SASReferences data set that is specified by the macro variable</Line><Line>      _cstSASRefs (type=referencexml, subtype=metamap, reftype=fileref,</Line><Line>      filetype=file).</Line><Line>      If the XML map file cannot be found, the datasetxml_createmap macro is</Line><Line>      used to create the XML map file (_cstMapType=metamap).</Line><Line>   7. _cstSourceDataMapFile must be specified. If this parameter is not</Line><Line>      specified, the macro attempts to get the parameter value from the</Line><Line>      SASReferences data set that is specified by the macro variable</Line><Line>      _cstSASRefs (type=referencexml, subtype=datamap, reftype=fileref,</Line><Line>      filetype=file).</Line><Line>      If the XML map file is not found, the datasetxml_createmap macro is used</Line><Line>      to create the XML map file (_cstMapType=datamap).</Line><Line>   8. If _cstSourceMetadataLibrary is specified, these data sets must exist in</Line><Line>      this library:</Line><Line>        definedocument</Line><Line>        study</Line><Line>        metadataversion</Line><Line>        itemgroupdefs</Line><Line>        itemgroupdefitemrefs (CRT-DDS 1.0)</Line><Line>        itemgroupitemrefs (Define-XML 2.0)</Line><Line>        itemdefs</Line><Line>        translatedtext (Define-XML 2.0)</Line><Line>   9. The Define-XML metadata is used to look up ItemGroupDef/@OID and</Line><Line>      ItemDef/@OID based on the data set name and variable name.</Line><Line/></Description><MacroVars><Param Name="&amp;_cstLRECL"><Line> File record length</Line></Param><Param Name="_cstDebug"><Line> Turns debugging on or off for the session. Set _cstDebug=1</Line><Line>             before this macro call to retain work files created in this macro.</Line></Param><Param Name="_cstResultSeq"><Line> Results: Unique invocation of macro</Line></Param><Param Name="_cstSeqCnt"><Line> Results: Sequence number within _cstResultSeq</Line></Param><Param Name="_cstStandard"><Line> Name of a standard registered to the SAS Clinical</Line><Line>             Standards Toolkit</Line></Param><Param Name="_cstStandardVersion"><Line> Version of the standard referenced in _cstStandard</Line></Param><Param Name="_cst_rc"><Line> Task error status</Line></Param><Param Name="_cst_rcmsg"><Line> Message associated with _cst_rc</Line></Param></MacroVars><CommentParams><Param Name="_cstAttachFormats"><Line> - optional - Attach formats to the data.</Line><Line>            These are the formats as defined in the ItemDef/@DisplayFormat</Line><Line>            Define-XML attribute.</Line><Line>            Values: Y | N</Line><Line>            Default:  Y</Line></Param><Param Name="_cstMaxLabelLength"><Line> - required - The maximum length of labels to create.</Line><Line>            Default: 256</Line></Param><Param Name="_cstNumObsWrite"><Line> - required - The maximum number of observations to</Line><Line>            write in the final data STEP (per loop). This can be used for</Line><Line>            performance tuning.</Line><Line>            Default:  10000</Line></Param><Param Name="_cstOutputLibrary"><Line> - required - The libref of the output data folder/</Line><Line>            library in which to create the dataset-XML files.</Line></Param><Param Name="_cstReturn"><Line> - required - The macro variable that contains the return</Line><Line>            value as set by this macro.</Line><Line>            Default: _cst_rc</Line></Param><Param Name="_cstReturnMsg"><Line> - required - The macro variable that contains the return</Line><Line>            message as set by this macro.</Line><Line>            Default: _cst_rcmsg</Line></Param><Param Name="_cstSourceDataMapFile"><Line> - optional - The path to the map file to read</Line><Line>            Dataset-XML data from an Dataset-XML file.</Line><Line>            If not specified, the value is derived from SASReferences or is</Line><Line>            created.</Line></Param><Param Name="_cstSourceDatasetXMLFile"><Line> - conditional - The complete path to the</Line><Line>            the Dataset-XML file to convert.</Line><Line>            Required if _cstSourceLibrary is not specified.</Line></Param><Param Name="_cstSourceDatasetXMLLibrary"><Line> - conditional - The libref of the source</Line><Line>            DatasetXML folder/library. Required if _cstSourceDatasetXMLFile is</Line><Line>            not specified.</Line></Param><Param Name="_cstSourceMetadataDefineFile"><Line> - conditional - The path to the Define-XML</Line><Line>            file.</Line></Param><Param Name="_cstSourceMetadataDefineFileRef"><Line> - conditional - The file reference that</Line><Line>            specifies the location of the Define-XML file.</Line></Param><Param Name="_cstSourceMetadataLibrary"><Line> - conditional - The libref of the source</Line><Line>            metadata folder/library.</Line></Param><Param Name="_cstSourceMetadataMapFile"><Line> - conditional - The path to the map file to</Line><Line>            read Define-XML metadata from an XML file.</Line><Line>            If not specified, the value is derived from SASReferences or is</Line><Line>            created.</Line></Param><Param Name="_cstdatetimeLength"><Line> - required - The length of date- and time-related</Line><Line>            variables to create.</Line><Line>            Default: 64</Line></Param></CommentParams><CodeParams><Param Name="_cstSourceDatasetXMLFile"/><Param Name="_cstSourceDatasetXMLLibrary"/><Param Name="_cstOutputLibrary"/><Param Name="_cstSourceMetadataLibrary"/><Param Name="_cstSourceMetadataDefineFile"/><Param Name="_cstSourceMetadataDefineFileRef"/><Param Name="_cstSourceMetadataMapFile"/><Param Name="_cstSourceDataMapFile"/><Param Name="_cstMaxLabelLength"/><Param Name="_cstdatetimeLength"/><Param Name="_cstAttachFormats"/><Param Name="_cstReturn"/><Param Name="_cstReturnMsg"/></CodeParams></Macro></Macros></SASFile><SASFile><FileName>datasetxml_write.sas</FileName><Macros><Macro><Signature>%datasetxml_write(_cstSourceDataSets=, _cstSourceLibrary=, _cstOutputLibrary=, _cstSourceMetadataLibrary=, _cstSourceMetadataDefineFile=, _cstSourceMetadataDefineFileRef=, _cstSourceMetadataMapFile=, _cstOutputEncoding=UTF-8, _cstCreationDateTime=, _cstAsOfDateTime=, _cstOriginator=, _cstSourceSystem=, _cstSourceSystemVersion=, _cstHeaderComment=Produced from SAS data using SAS Clinical Standards Toolkit, _cstNumericFormat=best32., _cstCheckLengths=Y, _cstIndent=Y, _cstZip=N, _cstDeleteAfterZip=N, _cstReturn=_cst_rc, _cstReturnMsg=_cst_rcmsg);</Signature><Exposure>external</Exposure><Since>1.7</Since><Description><Line> datasetxml_write</Line><Line/><Line> Creates a Dataset-XML file from a SAS data set or a library of SAS data sets.</Line><Line/><Line> Notes:</Line><Line>   1. Any librefs referenced in macro parameters must be pre-allocated.</Line><Line>   2. Files that exist in the output location are overwritten.</Line><Line>   3. Either _cstSourceDataSets or _cstSourceLibrary must be specified.</Line><Line>      If neither of  these parameters is specified, the macro attempts to get</Line><Line>      these parameter values from the SASReferences data set that is specified</Line><Line>      by the macro variable _cstSASRefs (type=sourcedata).</Line><Line>      If multiple type=sourcedata records are specified, memnames must be</Line><Line>      defined. If no memnames are specified, only the first record is used.</Line><Line>   4. _cstOutputLibrary must be specified. If this parameter is not specified,</Line><Line>      the macro attempts to get this parameter value from the SASReferences</Line><Line>      data set that is specified by the macro variable _cstSASRefs</Line><Line>      (type=externalxml).</Line><Line>   5. _cstSourceMetadataLibrary, _cstSourceMetadataDefineFile, or</Line><Line>      _cstSourceMetadataDefineFileRef must be specified.</Line><Line>      If none of these parameters are specified, the macro attempts to get</Line><Line>      _cstSourceMetadataLibrary from the SASReferences data set that is</Line><Line>      specified by the macro variable _cstSASRefs (type=sourcemetadata,</Line><Line>      subtype=, reftype=libref).</Line><Line>      If that fails, the macro attempts to get _cstSourceMetadataDefineFileRef</Line><Line>      from _cstSASRefs (type=sourcemetadata, subtyp=, reftype=fileref).</Line><Line>   6. If_cstSourceMetadataDefineFile or _cstSourceMetadataDefineFileRef has</Line><Line>      been specified, _cstSourceMetadataMapFile must be specified. If this</Line><Line>      parameter is not specified , the macro attempts to get this parameter</Line><Line>      value from the SASReferences data set that is specified by the macro</Line><Line>      variable _cstSASRefs (type=referencexml, subtype=metamap).</Line><Line>      If the XML mapfile cannot be found, the datasetxml_createmap macro</Line><Line>      is used to create the XML mapfile (_cstMapType=metamap).</Line><Line>   7. If _cstSourceMetadataLibrary is specified, these data sets must exist in</Line><Line>      this library:</Line><Line>        definedocument</Line><Line>        study</Line><Line>        metadataversion</Line><Line>        itemgroupdefs</Line><Line>        itemgroupdefitemrefs (CRT-DDS 1.0)</Line><Line>        itemgroupitemrefs (Define-XML 2.0)</Line><Line>        itemdefs</Line><Line>   8. The Define-XML metadata is used to look up ItemGroupDef/@OID and</Line><Line>      ItemDef/@OID based on the data set name and variable name.</Line><Line>      If the data set cannot be matched, a warning is written and the</Line><Line>      ItemGroupData/@ItemGroupOID attribute is generated as "IG.&lt;TABLE&gt;". If</Line><Line>      the data set variable cannot be matched, a warning is written and the</Line><Line>      ItemData/@ItemOID attribute is generated as "IT.&lt;TABLE&gt;.&lt;COLUMN&gt;".</Line><Line>      If this metadata cannot be found, it is generated:</Line><Line>        ODM/@FileOID as "DEFINE" (used as ODM/@PriorFileOID)</Line><Line>        ODM/Study/@OID as "STUDY1"</Line><Line>            (used as [ReferenceData|ClinicalData]/@StudyOID)</Line><Line>        ODM/Study/MetaDataVersion/@OID as "MDV1"</Line><Line>            (used as [ReferenceData|ClinicalData]/@MetaDataVersionOID)</Line><Line>   9. The macro allows for zipping the Dataset-XML file (_cstZip=Y), and</Line><Line>      optionally deleting the Dataset-XML file after zipping</Line><Line>      (_cstDeleteAfterZip=Y).</Line><Line/></Description><MacroVars><Param Name="&amp;_cstLRECL"><Line> File record length</Line></Param><Param Name="_cstDebug"><Line> Turns debugging on or off for the session. Set _cstDebug=1</Line><Line>             before this macro call to retain work files created in this macro.</Line></Param><Param Name="_cstResultSeq"><Line> Results: Unique invocation of macro</Line></Param><Param Name="_cstSeqCnt"><Line> Results: Sequence number within _cstResultSeq</Line></Param><Param Name="_cstStandard"><Line> Name of a standard registered to the SAS Clinical</Line><Line>             Standards Toolkit</Line></Param><Param Name="_cstStandardVersion"><Line> Version of the standard referenced in _cstStandard</Line></Param><Param Name="_cst_rc"><Line> Task error status</Line></Param><Param Name="_cst_rcmsg"><Line> Message associated with _cst_rc</Line></Param></MacroVars><CommentParams><Param Name="_cstAsOfDateTime"><Line> - optional - The date/time at which the source</Line><Line>            database was queried in order to create this document (ISO 8601).</Line></Param><Param Name="_cstCheckLengths"><Line> - optional - The actual value lengths of variables</Line><Line>            with DataType=text are checked against the lengths as defined in</Line><Line>            the metadata. If the lengths as defined in the metadata are too</Line><Line>            short, a warning is written to the log file.</Line><Line>            Values:  N | Y</Line><Line>            Default: N</Line></Param><Param Name="_cstCreationDateTime"><Line> - optional - The date/time at which the XML</Line><Line>            document was created. If no value is specified, the current date</Line><Line>            and time are used (ISO 8601).</Line></Param><Param Name="_cstDeleteAfterZip"><Line> - optional - Delete the Dataset-XML file after it is</Line><Line>            zipped (_cstZip=Y).</Line><Line>            Values:  N | Y</Line><Line>            Default: N</Line></Param><Param Name="_cstHeaderComment"><Line> - optional - The short comment that is added to the</Line><Line>            top of the Dataset-XML file to produce.</Line><Line>            Default: Produced from SAS data using the SAS Clinical Standards</Line><Line>            Toolkit</Line></Param><Param Name="_cstIndent"><Line> - optional - Indent the Dataset-XML file.</Line><Line>            Values:  N | Y</Line><Line>            Default: Y</Line></Param><Param Name="_cstNumericFormat"><Line> - required - The format used to write numeric data.</Line><Line>            Default: best32.</Line></Param><Param Name="_cstOriginator"><Line> - optional - The organization that generated the ODM</Line><Line>            file.</Line></Param><Param Name="_cstOutputEncoding"><Line> - optional - The XML encoding to use for the</Line><Line>            Dataset-XML file to create.</Line><Line>            Default: UTF-8</Line></Param><Param Name="_cstOutputLibrary"><Line> - required - The libref of the output data folder/</Line><Line>            library in which to create the dataset-XML files.</Line></Param><Param Name="_cstReturn"><Line> - required - The macro variable that contains the return</Line><Line>            value as set by this macro.</Line><Line>            Default: _cst_rc</Line></Param><Param Name="_cstReturnMsg"><Line> - required - The macro variable that contains the return</Line><Line>            message as set by this macro.</Line><Line>            Default: _cst_rcmsg</Line></Param><Param Name="_cstSourceDataSets"><Line> - conditional - A list of source data sets to</Line><Line>            convert. Specified as a blank-separated list of: (libref.)dataset</Line><Line>            Required if _cstSourceLibrary is not specified.</Line></Param><Param Name="_cstSourceLibrary"><Line> - conditional - The libref of the source data folder/</Line><Line>            library. Required if _cstSourceDataSets is not specified.</Line></Param><Param Name="_cstSourceMetadataDefineFile"><Line> - conditional - The path to the Define-XML</Line><Line>            file.</Line></Param><Param Name="_cstSourceMetadataDefineFileRef"><Line> - conditional - The file reference that</Line><Line>            specifies the location of the Define-XML file.</Line></Param><Param Name="_cstSourceMetadataLibrary"><Line> - conditional - The libref of the source</Line><Line>            metadata folder/library.</Line></Param><Param Name="_cstSourceMetadataMapFile"><Line> - optional - The path to the map file to</Line><Line>            read Define-XML metadata from an XML file.</Line><Line>            If not specified, it is derived from SASReferences or is created.</Line></Param><Param Name="_cstSourceSystem"><Line> - optional - The computer system or database</Line><Line>            management system that is the source of the information in this</Line><Line>            file.</Line></Param><Param Name="_cstSourceSystemVersion"><Line> - optional - The version of _cstSourceSystem.</Line></Param><Param Name="_cstZip"><Line> - optional - Zip the Dataset-XML file to a zip file in the same</Line><Line>            folder and with the same name as the Define-XML file.</Line><Line>            Values:  N | Y</Line><Line>            Default: N</Line></Param></CommentParams><CodeParams><Param Name="_cstSourceDataSets"/><Param Name="_cstSourceLibrary"/><Param Name="_cstOutputLibrary"/><Param Name="_cstSourceMetadataLibrary"/><Param Name="_cstSourceMetadataDefineFile"/><Param Name="_cstSourceMetadataDefineFileRef"/><Param Name="_cstSourceMetadataMapFile"/><Param Name="_cstOutputEncoding"/><Param Name="_cstCreationDateTime"/><Param Name="_cstAsOfDateTime"/><Param Name="_cstOriginator"/><Param Name="_cstSourceSystem"/><Param Name="_cstSourceSystemVersion"/><Param Name="_cstHeaderComment"/><Param Name="_cstNumericFormat"/><Param Name="_cstCheckLengths"/><Param Name="_cstIndent"/><Param Name="_cstZip"/><Param Name="_cstDeleteAfterZip"/><Param Name="_cstReturn"/><Param Name="_cstReturnMsg"/></CodeParams></Macro></Macros></SASFile><SASFile><FileName>manageclasspath.sas</FileName><Macros><Macro><Signature>%manageclasspath(Action=SAVE, Classpath=);</Signature><Exposure>external</Exposure><Since>1.7</Since><Description><Line> manageclasspath</Line><Line/><Line> Dynamically set the CLASSPATH for use by the javaobj in a dataset.</Line><Line/><Line> Programmers often want the ability to change the CLASSPATH environment variable</Line><Line> before a particular Java object is instantiated in the DATA step component</Line><Line> object interface. This macro dynamically alters the CLASSPATH during the</Line><Line> execution of a program. This capability allows you to access different</Line><Line> combinations of classes within a single SAS session.</Line><Line> This macro is based on the code as described in the following sample:</Line><Line>     http://support.sas.com/kb/38/518.html</Line><Line/></Description><Docrefs><Docref Path="http://support.sas.com/kb/38/518.html" Text="SAS Support Sample 38518"/></Docrefs><CommentParams><Param Name="Action"><Line> - required - Action to perform.</Line><Line>            The following actions can be specified:</Line><Line>              SAVE: Save current CLASSPATH value</Line><Line>              ADD: Add "ClassPath" value to the end of the current CLASSPATH</Line><Line>              RESTORE: Restore CLASSPATH to the value as saved by action=SAVE</Line><Line>            Values: SAVE | ADD | RESTORE</Line><Line>            Default: SAVE</Line></Param><Param Name="ClassPath"><Line> - required - The path to the jar file to add to the CLASSPATH</Line><Line>                        environment variable.</Line></Param></CommentParams><CodeParams><Param Name="Action"/><Param Name="Classpath"/></CodeParams></Macro></Macros></SASFile><SASFile><FileName>xml_validate.sas</FileName><Macros><Macro><Signature>%xml_validate(_cstXMLStandard=, _cstXMLStandardVersion=, _cstAvailableTransforms=&amp;DatasetXMLRoot/schema-repository/availabletransforms.xml, _cstSchemaRepository=&amp;DatasetXMLRoot/schema-repository, _cstXMLFolder=, _cstWhereClause=, _cstScope=USER, _cstReturn=_cst_rc, _cstReturnMsg=_cst_rcmsg);</Signature><Exposure>external</Exposure><Since>1.7</Since><Description><Line> xml_validate</Line><Line/><Line> Performs XML schema-level validation on a folder with XML files.</Line><Line/><Line> Only file with extension ".xml" will be included. XML files can be included or</Line><Line> excluded with the "_cstWhereClause" macro parameter.</Line><Line/></Description><MacroVars><Param Name="DatasetXMLRoot"><Line> Location of the Dataset-XML root</Line></Param></MacroVars><CommentParams><Param Name="_cstAvailableTransforms"><Line> - required - The location of the XML file that</Line><Line>            defines the available XML standards that can be validated and the</Line><Line>            XML schema location.</Line><Line>            Default: &amp;DatasetXMLRoot/schema-repository/availabletransforms.xml</Line></Param><Param Name="_cstReturn"><Line> - required - The macro variable that contains the return</Line><Line>            value as set by this macro.</Line><Line>            Default: _cst_rc</Line></Param><Param Name="_cstReturnMsg"><Line> - required - The macro variable that contains the return</Line><Line>            message as set by this macro.</Line><Line>            Default: _cst_rcmsg</Line></Param><Param Name="_cstSchemaRepository"><Line> - required - The Location of the schema repository.</Line><Line>            Default: &amp;DatasetXMLRoot/schema-repository</Line></Param><Param Name="_cstScope"><Line> - required - The space-separated list of the message scope</Line><Line>            values be add to the Results data set.</Line><Line>            Values: USER | SYSTEM | _ALL_</Line><Line>            Default: USER</Line></Param><Param Name="_cstWhereClause"><Line> - optional - Where clause base on the xmlfilename</Line><Line>            that selects the XML files within the XML folder.</Line><Line>            Example: %nrstr(where index(upcase(xmlfilename), "DEFINE") eq 0)</Line></Param><Param Name="_cstXMLFolder"><Line> - required - The location of the folder with XML files.</Line></Param><Param Name="_cstXMLStandard"><Line> - required - The standard associated with the XML file.</Line></Param><Param Name="_cstXMLStandardVersion"><Line> - required - The standard version associated</Line><Line>            with the XML file.</Line></Param></CommentParams><CodeParams><Param Name="_cstXMLStandard"/><Param Name="_cstXMLStandardVersion"/><Param Name="_cstAvailableTransforms"/><Param Name="_cstSchemaRepository"/><Param Name="_cstXMLFolder"/><Param Name="_cstWhereClause"/><Param Name="_cstScope"/><Param Name="_cstReturn"/><Param Name="_cstReturnMsg"/></CodeParams></Macro></Macros></SASFile></SASFiles></Module></Modules></Product>