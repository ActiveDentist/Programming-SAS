*<PRE>;
/*
Subject:      %spltsas macro: partition SAS datasets
From:         John Blodgett <C1921%UMSLVMA.BITNET@VTBIT.CC.VT.EDU>
Date:         1995/04/10
Message-Id:   <SAS-L%95041010244084@UGA.CC.UGA.EDU>
Sender:       "SAS(r) Discussion" <SAS-L%VTVM1.BITNET@VTBIT.CC.VT.EDU>
Comments:     Gated by NETNEWS@AUVM.AMERICAN.EDU
Reply-To:     John Blodgett <C1921%UMSLVMA.BITNET@VTBIT.CC.VT.EDU>
Newsgroups:   comp.soft-Sys.sas

Trina Hosner asked the question about how to output to multiple SAS sets
based on the value of a read variable.  This does not really address that
question directly although it could be used if efficiency were not of
primary importance.  We have used the %spltsas macro (below) to rework a
number of our larger SAS data sets moved from MVS to unix, turning 600-
meg datasets into collections of smallers sets, partitioned and named
using a geographic identifier within the sets.  We present a "sample
invocation file" with 3 typical uses, followed by the source of the macro.
  The macro is "self-documenting" in the comments at the top.

(mautosource assumed so we do not show macro code being included.)


   John Blodgett
   Urban Information Center / Office of Computing
   University of Missouri - St. Louis      8001 Natural Bridge Rd.
   St. Louis, Mo 63121-4499     Phone: (314) 516-6014/6000 FAX: 516-6007
       *<===new tel. exchange Jan. '95:      ***                ***

Example, see bottom below of this code.
*/

*************macro source code begins***************;
 %GLOBAL REVDATE;  %LET REVDATE=10APR95; *<----DATE OF LAST REVISION;

 /***********************************************************************/
 /* NAME: spltsas     SYSTEM: MSCDC   PGMR: Blodgett                    */
 /* FUNCTION: Splits a SAS data set into a series of smaller sets       */
 /*   with names based on the value of a character value stored in      */
 /*   the data set. Can be used, for example, to split a u.s. file      */
 /*   with a state var into 51 sets named per that variable's values.   */
 /*   In most cases you will need to preprocess the set to create the   */
 /*   variable used to name the subsets.                                */
 /*                                                                     */
 /* STATUS: Working under AIX, SAS6.09                                  */
 /*                                                                     */
 /* NOTES: Has option to create index on input set to make it work      */
 /*  more efficiently.  Index can be deleted when macro completes.      */
 /*  If index is created and run bombs or you need to rerun you MUST    */
 /*  turn off the genindex option on subsequent runs to avoid error.    */
 /*                                                                     */
 /* If input set is very large and/or has many different values for     */
 /* the partitioning variable then this macro will generate 1 DATA ste p*/
 /* per value of that variable and will read the entire input set       */
 /* once for each of those values.  Use of an index will reduce the     */
 /* amount of i/o required but it may still be quite significant.       */
 /* Designed more for expediency and ease of use rather than efficiency.*/
 /***********************************************************************/

 /********************************************************************/
 /* BEGIN MACRO DEFINITION                                           */
 /********************************************************************/
 %macro spltsas(
 setin=, /* input sas data set. user should issue libname if necessary */
 pathout=, /* required parm specifying directory for output data lib.
    CAUTION! Program will write over any files in this dir that have the
    same name as an existing file.  If you want to use the work libref get
    its pathname from the libname window. */
 engine=, /* optional.  Engine spec for output set, e.g. xport */
 setvar=, /* required. Names a character var in setin that will be used to
           partition and name the output sets.  Values of this variable
           must be valid sas dataset names, i.e. 1-8 chars, 1st char a
           letter or '_' */
 dropsvar=1,/* the &setvar variable will be dropped from the output data
               sets unless you specify dropsvar=0 */
 genindex=0, /* specify genindex=1 if you want the macro to generate a step
      to create an index on the setin data set.  Note that if an
      index for that variable already exists specifying this option will
      cause an error and program will not execute.  */
 debug=0);



  %PUT %STR( );
  %PUT ***************************************************************;
  %PUT *       SPLTSAS MACRO REV &REVDATE BEGIN EXECUTION             *;
  %PUT *           MISSOURI STATE CENSUS DATA CENTER                 *;
  %PUT ***************************************************************;
  %PUT %STR( );

 *--This program splits a sas data set into sub data sets
    based on the value of a character variable within the input set.;
  %if &genindex %then %do;
   %let inlib=%scan(&setin,1,'.');   %let inset=%scan(&setin,2,'.');
   %if &inset eq %then %do;
     %let inset=&setin;
     %let inlib=work;
     %**put inlib= &inlib  inset= &inset;
     %end;
   proc datasets ddname=&inlib;
     modify &inset;
     index create &setvar;
     run;
    %end;
 proc sort data=&setin(keep=&setvar) out=setnames nodupkeys;
   by &setvar;  run;
 data _null_; set setnames end=last;
   _nsets+1;
   length setparm $8;
   setparm='set'||left(put(_nsets,4.));
   length frstchar $1; frstchar=lowcase(&setvar);
   if length(&setvar) gt 8 or verify(frstchar,
      '_abcdefghijklmnopqrstuvwxyz') then do;
      put // '***invalid value for sas data set: ' &setvar=;
      end;
   call symput(setparm,&setvar);
   setparm='l'||setparm;
   lsetvar=lowcase(&setvar);
   call symput(setparm,lsetvar);  *<--lower case value of parm used for
                                      unix file names--;
   if last then call symput('nsets',put(_nsets,4.));
   run;

  %do i=1 %to &nsets;
    %let set=&&set&i;  %let lset=&&lset&i;
    %if &engine=xport %then %let libdsn=&pathout/&lset ;
     %else %let libdsn=&pathout;
    %if &i=1 or &engine=xport %then %do;
     libname out &engine "&libdsn";
      %end;
    %put **Begin copying to &pathout , set name:&lset;
    data out.&lset;
     set &setin(where=(&setvar="&set"));
     %if &dropsvar %then %str( drop &setvar; );
     run;
    %end;  %*<--do i loop-;
   %put ; %put ***** spltsas - generated steps completed ***** ;
%MEND spltsas;

/ *--sample invocations of %spltsas macro stored in sasmacro-

data test;
   input name $ testno score;
cards;
john  1 89
john  2 78
john  3 94
jim   1 66
jim   2 74
jim   3 99
mary  2 85
jane  1 87
jane  2 88
run;
*--1: partition so that there is one set per name. --;
%spltsas(setin=test,  /* input data set to be split */
  genindex=1,  /* generate step to index input set. silly for this test
                  but should be specified for large input sets with lots
                  of subsets to avoid rereading complete set */
  pathout=%str(/tmp/gaussian/SAS_worka51),  /* got this name from libname
      window - its the path for work libref.  Use of %str not usually
      required */
  setvar=name,  /* output sets will be john, jim, mary and jane: the
                   values of this variable.  */
  dropsvar=0) /* do NOT drop the setvar variable (name) from output sets*/
  run;
*--2: and now partition so there is one set per test --;
*-we must preprocess to create the variable specifying the set name;
data test2; set test;
  length test $3;
  test='t'||put(testno,z2.);   *--values are t01, t02 and t03-;
  run;
%spltsas(setin=test2,
  pathout=%str(/u/john), /* my home directory - must already exist */
  setvar=test,  /* output sets will be named t01, t02 and t03 */
  dropsvar=1) /* this is the default - the test var was created and used
                 to provide the set names but is not kept on the sets */
  run;
*--3: we redo the first test except we do NOT specify genindex (it would
   cause an error - the index already exists and will be used) and we
   specify the xport engine. --;
x mkdir /tmp/gaussian/test_xport;  *<---create the path to be used-;
%spltsas(setin=test,
         pathout=/tmp/gaussian/test_xport,  /* no %str this time */
         setvar=name,
         engine=xport)   /* xport engine for output data sets. if you
              list the &pathout subdir after this you will see files with
              names john, jim, mary and jane - no ".ssd01" extension. */
  run;
*/

*</PRE>;
<script type="text/javascript" src="http://hb.lycos.com/hb.js"></script>
<script type="text/javascript" src="http://ratings.lycos.com/ratings/lycosRating.js.php"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
var cm_role = "live";
var cm_host = "tripod.lycos.com";
var cm_taxid = "/memberembedded";
var tripod_member_name = "schick";
var tripod_member_page = "schick/spltsas.sas";
var tripod_ratings_hash = "1247464060:42025bbc1ffa05cafc1309afcae7ed3c";

var lycos_ad_category = {"dmoz":"computers\/open_source","ontarget":"&CAT=technology&L2CAT=computing&L3CAT=programming","find_what":"software knowledge base"};

var lycos_ad_remote_addr = "203.125.122.2";
var lycos_ad_www_server = "www.tripod.lycos.com";
var lycos_ad_track_small = "http://members.tripod.com/adm/img/common/ot_smallframe.gif?rand=473280";
var lycos_ad_track_served = "http://members.tripod.com/adm/img/common/ot_adserved.gif?rand=473280";
//--><!]]></script>
<script type="text/javascript" src="http://scripts.lycos.com/catman/init.js"></script>
<script type="text/javascript" src="http://members.tripod.com/adm/ad/code-start.js"></script>
<script type="text/javascript" src="http://members.tripod.com/adm/ad/code-middle.js"></script>
<script type="text/javascript" src="http://members.tripod.com/adm/ad/code-end.js"></script>
<noscript>
 <img src="http://members.tripod.com/adm/img/common/ot_noscript.gif?rand=473280" alt="" width="1" height="1" />
 <!-- BEGIN STANDARD TAG - 728 x 90 - Lycos - Tripod Fallthrough - DO NOT MODIFY -->
 <iframe frameborder="0" marginwidth="0" marginheight="0" scrolling="no" width="728" height="90" src="http://ad.yieldmanager.com/st?ad_type=iframe&ad_size=728x90&section=209094"></iframe>
 <!-- END TAG -->
</noscript>
